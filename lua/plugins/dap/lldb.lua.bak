local M = {}

function M.setup()
  local dap = require "dap"
  dap.adapters.lldb = {
    type = "executable",
    command = "/opt/homebrew/opt/llvm/bin/lldb-vscode", -- adjust as needed, must be absolute path
    name = "lldb",
  }

  --https://zhuanlan.zhihu.com/p/590908735
  local get_args = function()
    local cmd_args = vim.fn.input "CommandLine Args:"
    local params = {}
    for param in string.gmatch(cmd_args, "[^%s]+") do
      table.insert(params, param)
    end
    return params
  end

  local function get_executable_from_cmake(path)
    local get_executable = 'awk "BEGIN {IGNORECASE=1} /add_executable\\s*\\([^)]+\\)/ {match(\\$0, /\\(([^\\)]+)\\)/,m);match(m[1], /([A-Za-z_]+)/, n);printf(\\"%s\\", n[1]);}" '
      .. path
      .. "CMakeLists.txt"
    return vim.fn.system(get_executable)
  end

  dap.configurations.cpp = {
    {
      name = "Launch",
      type = "lldb",
      request = "launch",
      program = function()
        local current_path = vim.fn.getcwd() .. "/"
        local fd_make = string.format("find %s -maxdepth 1 -name '[m\\|M]akefile'", current_path)
        local fd_make_result = vim.fn.system(fd_make)
        if fd_make_result ~= "" then
          local mkf = vim.fn.system(fd_make)
          local cmd = 'awk "\\$0 ~ /:/ { match(\\$1, \\"([A-Za-z_]+)\\", m); printf(\\"%s\\", m[1]); exit; }" ' .. mkf
          local exe = vim.fn.system(cmd)
          if os.execute 'make CXXFLAGS="-g"' then
            return current_path .. exe
          end
        end
        local fd_cmake = string.format("find %s -name CMakeLists.txt -type f", current_path)
        local fd_cmake_result = vim.fn.system(fd_cmake)
        if fd_cmake_result == "" then
          return vim.fn.input("Path to executable: ", current_path, "file")
        end
        local fd_build = string.format("find %s -name build -type d", current_path)
        local fd_build_result = vim.fn.system(fd_build)
        if fd_build_result == "" then
          if not os.execute(string.format("mkdir -p %sbuild", current_path)) then
            return vim.fn.input("Path to executable: ", current_path, "file")
          end
        end
        local cmd = "cd " .. current_path .. "build && cmake .. -DCMAKE_BUILD_TYPE=Debug"
        print "Building The Project..."
        vim.fn.system(cmd)
        local exec = get_executable_from_cmake(current_path)
        local make = "cd " .. current_path .. "build && make"
        local res = vim.fn.system(make)
        if exec == "" or res == "" then
          return vim.fn.input("Path to executable: ", current_path, "file")
        end
        return current_path .. "build/" .. exec
      end,
      --      program = function()
      --        return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
      --      end,
      cwd = "${workspaceFolder}",
      stopOnEntry = false,
      args = get_args,

      -- ðŸ’€
      -- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting:
      --
      --    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
      --
      -- Otherwise you might get the following error:
      --
      --    Error on launch: Failed to attach to the target process
      --
      -- But you should be aware of the implications:
      -- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html
      -- runInTerminal = false,
      --

      env = function()
        local variables = {}
        for k, v in pairs(vim.fn.environ()) do
          table.insert(variables, string.format("%s=%s", k, v))
        end
        return variables
      end,
    },
  }

  -- If you want to use this for Rust and C, add something like this:

  dap.configurations.c = dap.configurations.cpp
  dap.configurations.rust = dap.configurations.cpp
end

return M
